package neoxzim.com.neoxznativeimage;

import android.annotation.TargetApi;
import android.graphics.PixelFormat;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.ImageReader;
import android.media.projection.MediaProjection;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

/**
 * Created by Carlos Fonseca on 10/9/2017.
 */

public class NeoxzNativeStream {

    private int _screenDensity, _width, _height, _photoBuffer, _compressionLevel, _remotePort;
    private String _remoteHost;
    private Socket _socket;
    private ImageReader _imageReader;
    private OutputStream _outStream;
    private NativeImageListener _nativeImageListener;
    private final String TAG = "ImageAvailableListener";
    private Handler _handler;


    public NeoxzNativeStream() {
        Log.d(TAG, "NeoxzNativeStream: Native stream created");
    }


    /**
     * Initializes the screen streaming over TCP socket
     *
     * @param remoteHost       Ip of the remote device
     * @param remotePort       Port in which the remote device is listening for a new connection
     * @param width            Screen height of the device
     * @param height           Screen width of the device
     * @param photoBuffer      Determines how many images can Image Reader hold before start skipping the new ones generated by the MediaRecorder
     * @param compressionLevel Compression level of the acquired images before write to outputStream (Bitmap.compress)
     * @param screenDensity    Density of the screen
     * @throws Exception
     */
    @TargetApi(Build.VERSION_CODES.KITKAT)
    public NeoxzNativeStream(String remoteHost, int remotePort, int width, int height, int photoBuffer, int compressionLevel, int screenDensity) throws Exception {
        try {
            _screenDensity = screenDensity;
            _width = width;
            _height = height;
            _photoBuffer = photoBuffer;
            _compressionLevel = compressionLevel;
            _remoteHost = remoteHost;
            _remotePort = remotePort;
            Thread socketThread = new Thread() {
                @Override
                public void run() {
                    try {
                        Log.d(TAG, "NeoxzNativeStream: Connecting to " + _remoteHost + " " + _remotePort);
                        _socket = new Socket(_remoteHost, _remotePort);
                        _outStream = _socket.getOutputStream();
                        Log.d(TAG, "NeoxzNativeStream: Connected " + _remoteHost + " " + _remotePort);
                    } catch (Exception e) {
                        Log.d(TAG, "NeoxzNativeStream: " + e.toString());
                        e.printStackTrace();
                    }
                }
            };
            socketThread.start();
            socketThread.join();
            new Thread() {
                @Override
                public void run() {
                    Looper.prepare();
                    _handler = new Handler();
                    Looper.loop();
                }
            }.start();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                _imageReader = ImageReader.newInstance(_width, _height, PixelFormat.RGBA_8888, _photoBuffer);
                Log.d(TAG, "NeoxzNativeStream: Reader instance created");
            }
            _nativeImageListener = new NativeImageListener(_height, _width, _outStream, _compressionLevel);
        } catch (Exception ex) {
            Log.d(TAG, "NeoxzNativeStream: " + ex.toString());
            ex.printStackTrace();
            throw ex;
        }
    }


    /**
     * Creates a virtual display using ImageReader surface
     *
     * @param virtualDisplayName Name of the virtual display
     * @param _mProjection       MediaProjection to create the virtual display
     * @return Created virtual display
     */
    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public VirtualDisplay createNativeVirtualDisplay(String virtualDisplayName, MediaProjection _mProjection) {
        try {
            _imageReader.setOnImageAvailableListener(_nativeImageListener, _handler);
            return _mProjection.createVirtualDisplay(virtualDisplayName, _width, _height, _screenDensity, DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, _imageReader.getSurface(), null, _handler);
        } catch (Exception ex) {
            Log.d(TAG, "createNativeVirtualDisplay: " + ex.toString());
            return null;
        }
    }


    public void Dispose() throws IOException {
        _socket.close();
    }

    public Handler get_handler() {
        return _handler;
    }
}
